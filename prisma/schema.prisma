generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String?
  email String? @unique
  role  Role    @default(USER)

  // A user can create many brands, categories, subcategories, products, and product images
  brands        Brand[]
  categories    Category[]
  subCategories SubCategory[]
  products      Product[]
  productImages ProductImage[]
}

model Brand {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  logoUrl    String?
  createdBy  String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isApproved Boolean  @default(false)

  // A brand can have many products (it can belong to many products)
  products Product[]

  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  createdBy  String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isApproved Boolean  @default(false)

  // A category can have many subcategories (it can belong to many subcategories)
  subCategories SubCategory[]

  // A category can have many products (it can belong to many products)
  products CategoriesOnProducts[]

  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model SubCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String   @db.ObjectId
  name       String   @unique
  createdBy  String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isApproved Boolean  @default(false)

  // A subcategory can have many products (it can belong to many products)
  products SubCategoriesOnProducts[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  brandId      String?  @db.ObjectId
  name         String
  description  String
  imageUrl     String
  price        Int
  freeShipping Boolean  @default(false)
  createdBy    String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isApproved   Boolean  @default(false)

  // A product can have many categories (it can belong to many categories)
  categories CategoriesOnProducts[]

  // A product can have many subcategories (it can belong to many subcategories)
  subCategories SubCategoriesOnProducts[]

  // A product can have many images (it can belong to many images)
  moreImages ProductImage[]

  // A product can have many carts (it can belong to many carts)
  carts CartsOnProducts[]

  brand Brand? @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model ProductImage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  imageUrl   String
  createdBy  String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isApproved Boolean  @default(false)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A cart can have many products/cart items (it can belong to many products/cart items)
  cartItems CartsOnProducts[]
}

model CategoriesOnProducts {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  productId  String @db.ObjectId
  categoryId String @db.ObjectId

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model SubCategoriesOnProducts {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  productId     String @db.ObjectId
  subCategoryId String @db.ObjectId

  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  subCategory SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
}

model CartsOnProducts {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  cartId    String @db.ObjectId
  quantity  Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
}
